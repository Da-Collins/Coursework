My implementation for this project is rather short consisting only of a main method and a phoneCall thread function.  To begin I have global variable for the semaphores I will be using, the number of operators and lines, the number of connected lines and the value of the next thread's id.  I begin by initializing my semaphores, the ones for connected and nextid are binary the one for operators is counting.  I then get the number of phone calls passed in through argv and use that to initialize my array of pthreads.  Using a for-loop I create pthreads using the phoneCall method as their thread function.  In the phone call function we start off in a critical section where each thread is both assigned its id and increments the global variable for the next thread.  We print off that the thread is trying to connect before entering a while(1) loop where I check connected to see if there is a available line.  Inside this critical section is the check to see if a line is available then if it is, incrementing connected and exiting the loop.  if the check fails the thread sleeps for half a second prints that it failed to connect and trys again.  On success the thread prints that it's connected and is waiting for an operator.  Next using the operator counting semaphore the thread waits until it gains access to the critical section signifying an operator is available where it then order the medicine then sleeps for a second to signify the ordering process.  We then exit then enter a final critical section where the thread decrements connected and prints that it has hung up.  Finally we return to main where we go through the pthread array and join all the threads, then destroy all the semaphores before terminating the program.  Video:  https://youtu.be/nPQiyGgxPr8

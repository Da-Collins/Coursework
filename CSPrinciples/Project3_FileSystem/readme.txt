My submission contains three main files, tree.h, tree.c wordfreak.c.  tree.h contains the declaration of my bstNode struct, this struct has parameters name, count, left and right.  This file also outlinesalso outlines the declaration for all my methods pertaining to my implementation of my bst.  tree.c is where all of the declarations outlines in tree.h most of these are just normal getters and setters but two are very important to my implementation.  The first is my method that performs an in order traversal of the tree, this is done recursively.  This is also where the formatting of the output and the writing to output.txt is done.  The other important method is my method to add a node to a bst.  If a word alphabetically comes before another word it is put to the left of the parent node, if it is equal then the count of that word is increased.  otherwise it is put to the right.  Lastly is wordfreak.c this is where the hashtable is definied and used.  My hashtable is an array of 26 bsts that is declared as a global variable.  words are put into these bsts using my hash function which converts the ascii value of the first letter of each word to the corresponding index of the correct bst.  The main function can take input from stdin, argv, and the enviroment variable WORD_FREAK.  I read all of these files the same way.  Characters are read into the buffer one by one and are collected until a non alphabet character is encountered.  These collected characters are passed into the hash function and are stored into a bst.  This is done until all words are read form all 3 forms of input.  Once all words are stored in the bsts they are formatted using the in-order traversal described above where they are put into output.txt. https://youtu.be/n2ZWtGSLTRo
